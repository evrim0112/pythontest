# @region:logging:Application logging
def log_message(level, message):
    if level not in ["INFO", "WARNING", "ERROR"]:
        raise ValueError("Invalid log level")
    print(f"[{level}] {message}")
# @end-region:logging


# @region:data_processing:Data transformation utilities
def normalize_text(text):
    if not text:
        return ""
    return text.strip().lower()
# @end-region:data_processing


# @region:math_utils:Mathematical helper functions
def calculate_average(numbers):
    if not numbers:
        return 0
    return sum(numbers) / len(numbers)
# @end-region:math_utils


# @region:date_utils:Date and time operations
from datetime import datetime

def format_date(date_obj, fmt="%Y-%m-%d"):
    if not isinstance(date_obj, datetime):
        raise TypeError("Expected datetime object")
    return date_obj.strftime(fmt)
# @end-region:date_utils


# @region:security:Security-related helpers
import hashlib

def hash_password(password):
    if not password:
        raise ValueError("Password cannot be empty")
    return hashlib.sha256(password.encode()).hexdigest()
# @end-region:security
